#pragma once

#include <type_traits>

namespace s2 {

template <typename T>
struct is_const {
  enum { value = false };
};
template <typename T>
struct is_const<const T> {
  enum { value = true };
};

template <typename T>
typename remove_reference<T>::type&& move(T&& arg)
{
  static_assert(!s2::is_const<T>::value, "Do not use std::move on const objects, it does not work.");
  return static_cast<typename remove_reference<T>::type&&>(arg);
}

template <typename T, typename U>
class pair {
public:
  pair(T t, U u) : first(s2::move(t)), second(s2::move(u)) {}
  bool operator==(const pair<T, U>& o) const {
    return (o.first == first &&
            o.second == second);
  }
  T first;
  U second;
};

template <typename T, typename U>
s2::pair<T, U> make_pair(T t, U u) {
  return s2::pair<T, U>(t, u);
}

template <class T> T&& forward (typename remove_reference<T>::type& arg) noexcept {
  return static_cast<T&&>(arg);
}

template <class T> T&& forward (typename remove_reference<T>::type&& arg) noexcept {
  return static_cast<T&&>(arg);
}

template <typename T, typename U = T>
constexpr T exchange(T& obj, U&& new_value) {
  T old_value = s2::move(obj);
  obj = s2::forward<U>(new_value);
  return old_value;
}

}


