#pragma once

#include <vector>
#include <utility>

namespace s2 {

template <typename K, typename V>
class flatmap : private vector<pair<K, V>> {
public:
  typedef typename vector<pair<K, V>>::iterator iterator;
  typedef typename vector<pair<K, V>>::const_iterator const_iterator;
  using vector<pair<K, V>>::begin;
  using vector<pair<K, V>>::end;
  using vector<pair<K, V>>::size;
  V &operator[](const K &key) {
    for (pair<K, V> &p : *this) {
      if (p.first == key) return p.second;
    }
    this->push_back(pair<K, V>(key, V()));
    return this->back().second;
  }
  void emplace(K k, V v) {
    (*this)[move(k)] = move(v);
  }
  template <typename P>
  void insert(const P & p) {
    (*this)[p.first] = p.second;
  }
  iterator find(const K &k) {
    auto it = this->begin();
    while (it != this->end()) {
      if (it->first == k) break;
      ++it;
    }
    return it;
  }
  const_iterator find(const K &k) const {
    auto it = this->begin();
    while (it != this->end()) {
      if (it->first == k) break;
      ++it;
    }
    return it;
  }
  bool contains(const K& k) const {
    const_iterator it = find(k);
    return it == this->end();
  }
  void erase(iterator it) {
    *it = move(this->back());
    this->pop_back();
  }
};

}


