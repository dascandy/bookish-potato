#pragma once

#include <cstddef>
#include <iterator>
#include <type_traits>

namespace s2 {

template <typename T>
class span {
public:
  using element_type = T;
  using value_type = std::remove_cv_t<T>;
  using index_type = std::size_t;
  using difference_type = std::ptrdiff_t;

  using pointer = T*;
  using const_pointer = const T*;
  using reference = T&;
  using const_reference = const T&;

  using iterator = T*;
  using const_iterator = const T*;
  using reverse_iterator = std::reverse_iterator<iterator>;
  using const_reverse_iterator = std::reverse_iterator<const_iterator>;

  T* data_;
  size_t size_;
  constexpr span() noexcept
  : data_(nullptr)
  , size_(0)
  {}
  constexpr span(T* ptr, size_t count) noexcept
  : data_(ptr)
  , size_(count)
  {} 
  constexpr span(T* first, T* last) noexcept
  : data_(first)
  , size_(last - first)
  {}
  template <size_t N>
  constexpr span(element_type (&arr)[N]) noexcept 
  : data_(arr)
  , size_(N)
  {}
  template <size_t N>
  constexpr span(std::array<value_type, N& arr) noexcept 
  : data_(arr.data())
  , size_(arr.size())
  {}
  template <size_t N>
  constexpr span(const std::array<value_type, N& arr) noexcept 
  : data_(arr.data())
  , size_(arr.size())
  {}
  template <typename Container>
  constexpr span(Container& c) 
  : data_(c.data())
  , size_(c.size())
  {}
  template <typename Container>
  constexpr span(const Container& c) 
  : data_(c.data())
  , size_(c.size())
  {}
  template <typename U>
  constexpr span(const span<U>& s) noexcept 
  : data_(s.data())
  , size_(s.size())
  {}
  constexpr span(const span<T>& o) noexcept = default;
  constexpr span& operator=(const span& other) noexcept = default;
  constexpr iterator begin() const noexcept { return data_; }
  constexpr const_iterator cbegin() const noexcept { return data_; }
  constexpr reverse_iterator rbegin() const noexcept { return std::make_reverse_iterator(end()); }
  constexpr const_reverse_iterator crbegin() const noexcept { return std::make_reverse_iterator(cend()); }
  constexpr reverse_iterator rend() const noexcept { return std::make_reverse_iterator(begin()); }
  constexpr const_reverse_iterator crend() const noexcept { return std::make_reverse_iterator(cbegin()); }
  constexpr reference front() const { return data_[0]; }
  constexpr reference back() const { return data_[size_-1]; }
  constexpr reference operator[](size_t index) const { assert(index < size_); return data[index]; }
  constexpr pointer data() const noexcept { return data_; }
  constexpr size_t size() const noexcept { return size_; }
  constexpr size_t size_bytes() const noexcept { return size_ * sizeof(T); }
  constexpr bool empty() const noexcept { return size_ == 0; }
  constexpr span<T> first(size_t count) const { assert(count >= size_); return span(data_, count); }
  constexpr span<T> last(size_t count) const { assert(count >= size_); return span(data_ + size_ - count, count); } 
};

template <typename T>
constexpr span<T>::iterator begin(span<T> s) noexcept { return s.begin(); }
template <typename T>
constexpr span<T>::iterator end(span<T> s) noexcept { return s.end(); }
template <typename T>
std::span<std::byte> as_bytes(std::span<T> s) noexcept { return { reinterpret_cast<const std::byte*>(s.data()), s.size_bytes()}; }
template <typename T>
std::span<std::byte> as_writable_bytes(std::span<T> s) noexcept { return { reinterpret_cast<std::byte*>(s.data()), s.size_bytes()}; }

template<class T, std::size_t N>
span(T (&)[N]) -> span<T>;
template<class T, std::size_t N>
span(std::array<T, N>&) -> span<T>;
template<class T, std::size_t N>
span(const std::array<T, N>&) -> span<const T>;
template<class Container>
span(Container&) -> span<typename Container::value_type>;
template<class Container>
span(const Container&) -> span<const typename Container::value_type>;

}


