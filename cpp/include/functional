#pragma once

#include <memory>

namespace s2 {

template <typename T>
class function;

template <typename R, typename... Args>
class function<R(Args...)> {
public:
  class wrapI {
  public:
    virtual ~wrapI() {}
    virtual R operator()(Args...) const = 0;
  };
  template <typename T>
  class wrap : public wrapI {
  public:
    wrap(T t) : t(t) {}
    R operator()(Args... args) const {
      return t(args...); 
    }
    T t;
  };
  template <typename T>
  function(T t)
  : _impl(new wrap<T>(t))
  {
  }
  function() {}
  explicit operator bool() { return _impl.get() != nullptr; }
  R operator()(Args... args) const {
    return _impl->operator()(args...);
  }
private:
  s2::shared_ptr<wrapI> _impl;
};

}


